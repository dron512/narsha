'''
  혼공머신과 김 팀장의 보고를 받은 이사님은 매우 흡족해 했습니다. 무엇보다도 이 모델로 어떻게 화이트 와인을 골라내는지 이해했거든요
  보고서를 물끄러미 바라보던 이사님이 한가지 질문을 던집니다.

  max_depth를 3 말고 다른 값으로 하면 성능이 달라지나요?
  네 아마 그럴 것 같습니다. 모든 값을 다 시도 할 수는 없지만 시간이 허락하는 대로 테스트 하려 합니다.

  이때 이사님의 번득이는 직관이 두 사람을 굳어지게 만들었습니다.

  이런저런 값으로 모델을 많이 만들어서 테스트 세트로 평가하면 결국 테스트 세트에 잘 맞는 모델이 만들어 지는 것 아닌가요?

  지금까지 우리는 훈련 세트에서 모델을 훈련하고 테스트세트에서 모델을 평가 했습니다. 
  테스트 세트에서 얻은 점수를 보고 아 이모델을 실전에 투입하면 이정도 성능을 기대할 수 있겠군. 이라고 생각을 합니다.
  즉 일반화 성능을 가늠해 볼수 있는 거죠 그런데 테스트세트를 사용해 자꾸 성능을 확인하다 보면 점점 테스트 세트에 
  맞추게 되는 셈입니다.

  이전까지는 문제를 간단히 하려고 테스트 세트를 사용했습니다. 하지만 테스트 세트로 일반화 성능을 올바르게 예측 하려면
  가능한 한 테스트 세트를 사용하지 말아야 합니다. 모델을 만들고 나서 마지막에 딱 한번만 사용하는 것이 좋습니다. 그렇타면
  max_depth 매개변수를 사용한 하이퍼 파라미터 튜닝을 어떻게 할 수 있을까요? 게다가 결정트리는 테스트해
  볼 매개변수가 많습니다.

  검증 세트

  테스트 세트를 사용하지 않으면 모델이 과대s 적합인지 과소 적합인지 판다하기 어렵습니다. 테스트 세트를 사용하지 않고
  이를 측정하는 간단한 방법은 훈련세트를 또 나누는 거죠! 이 데이터를 검증세트라고 부릅니다.

  이 방법이 너무 단순해서 이상하게 들릴 수도 있겠지만, 실제로 많이 사용하는 방법입니다.
  1절에서 전체 데이터중 20%를 테스트 세트로 만들고 나머지 80%를 훈련세트로 만들었습니다. 
  이 훈련 세트 중에서 다시 20%를 떼어 내어 검증 세트로 만듭니다.
'''

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import cross_validate
from sklearn.model_selection import StratifiedKFold
from sklearn.model_selection import GridSearchCV
from scipy.stats import uniform,randint
from sklearn.model_selection import RandomizedSearchCV
import numpy as np

wine = pd.read_csv('https://bit.ly/wine-date')

data = wine[['alcohol','sugar','pH']].to_numpy()
target = wine['class'].to_numpy()

# print(data)
# print(target)

train_input,test_input,train_target,test_target \
    = train_test_split(data,target,test_size=0.2,random_state=42)
sub_input, val_input, sub_target, val_target \
    = train_test_split(train_input,train_target,test_size=0.2,random_state=42)

print(sub_input.shape,val_input.shape)
# 네 원래 5197개였던 훈련 세트가 4157개로 줄고 , 검증세트는 1040개가 되었습니다. 이제 sub_input,sub_target과
# val_input,val_target을 사용해 모델을 만들고 평가해보겠습니다.

dt = DecisionTreeClassifier(random_state=42)
dt.fit(sub_input,sub_target)
print(dt.score(sub_input,sub_target))
print(dt.score(val_input,val_target))

'''
    이 모델은 확실히 훈련세트에 과대적합되어 있군요. 매개변수를 바꿔서 더 좋은 모델을 찾아야 합니다.
    그 전에 검증 세트에 관해 좀 더 알아햐 할것이 있습니다
'''

#교차 검증
'''
    검증 세트를 만드느라 훈련세트가 줄었습니다. 보통 많은 데이터를 훈련에 사용할 수록 좋은 모델이 만들어집니다.
    그렇다고 검증 세트를 너무 조금 뗴어 놓으면 검증 점수가 들쭉날쭉하고 불안정 할 것입니다.
    이럴때 교차 검증을 이용하면 안정적인 검증 점수를 얻고 훈련에 더 많은 데티어를 사용할 수 있습니다.
    교차 검증은 검증세트를 뗴어 내어 평가하는 과정을 여러번 반복합니다. 
    이다음 이 점수를 평균하여 최종 검증 점수를 얻습니다.

    훈련세트를 세부분으로 나눠서 교차 검증을 수행하는 것을 3-폴드 교차 검증이라고 합니다. 통칭 k-폴드 교차 검증
    이라고 하며, 훈련 세트를 몇부분으로 나누냐에 따라 다르게 부릅니다. k-겹 교차 검증이라고도 부릅니다.

    이해를 돕기 위해 3-폴드 교차 검증을 예시로 들었지만, 보통 5-폴드 교차 검증이나. 10-폴드 교차 검증을 많이
    사용합니다. 이렇게 하면 데이터를 80~90%까지 훈련에 사용할 수 있습니다. 검증 세트가 줄어들지만 계산한
    검증 점수를 평균하기 때문에 안정된 점수로 생각할 수 있습니다.

    사이킷런에서는 cross_validate()라는 교차 검증 함수가 있습니다. 사용법은 간단한데, 먼저 평가할 모델 객체를
    첫번째 매개변수로 전달 합니다. 그다음 앞에서처럼 직접 검증 세트를 뗴어 내지 않고 훈련세트 전체를
    cross_validate()함수로 전달합니다.
'''

scores = cross_validate(dt,train_input,train_target)

print(scores)

'''
    이 함수는 fit_time,score_time,test_score 키를 가진 딕셔너리를 반환 합니다.
    처음 2개의 키는 각각 모델을 훈련하는 시간과 검증하는 시간을 의미 합니다.
    각 키마다 5개의 숫자가 담겨 있습니다.
    cross_validate() 함수는 기본적으로 5-폴드 교차 검증을 수행합니다. cv매개변수에서 폴드 수를 바꿀수도 있습니다.

    훈련과 검증 시간은 코랩에서 리소스를 사용하는 상황에 따라 달라질 수 있으므로 fit_time과 score_time세트는
    출력 결과가 책과 다를 수 있습니다.

    교차 검증의 최종 점수는 test_score키에 담긴 5개의 점수를 평균하여 얻을 수 있습니다. 이름은 test_score지만
    검증 폴드의 점수입니다.
'''

print(np.mean(scores['test_score']))

'''
    교차 검증을 수행하면 입력한 모델에서 얻을 수 있는 최상의 검증 점수를 가늠해 볼 수 있습니다.
    
    한가지 주의할 점은 cross_validate() 는 훈련 세트를 섞어 폴드를 나누지 않습니다. 앞서 우리는
    train_test_split()함수로 전체 데이터를 섞은후 훈련 세트를 준비했기 때문에 따로 섞을 필요가 없습니다.
    하지만 만약 교차 검증을 할 떄 훈련 세트를 섞으려면 분할기를 지정해야 합니다.

    사이킷런의 분할기는 교차 검증에서 폴드를 어떻게 나눌지 결정해줍니다. cress_validate()함수는 기본적으로 
    회귀모델일 경우 KFold 분할기를 사용하고 분류 모델일 경우 타깃 클래스를 골고루 나누기 위해
    StratifiedKFold를 사용합니다. 즉 앞서 수행한 교차 검증은 다음 코드와 동일합니다.
'''

scores = cross_validate(dt,train_input,train_target, cv=StratifiedKFold())
print(np.mean(scores['test_score']))

'''
    만약 훈련 세트를 섞은 후 10-폴드 교차 검증을 수행하려면 다음과 같이 작성합니다.
'''

splitter = StratifiedKFold(n_splits=10,shuffle=True,random_state=42)
scores = cross_validate(dt,train_input,train_target,cv=splitter)
print(scores)
print(np.mean(scores['test_score']))

'''
    하이퍼 파라미터 튜닝
    머신러닝 모델이 학습하는 파라미터를 모델 파라미터라고 부른다고 했던 것을 기억하나요?
    반면에 모델이 학습할 수 없어서 사용자가 지정해야만 하는 파라미터를 하이퍼파라미터라고 합니다.
    사이킷런과 같은 머신러닝 라이브러리를 사용할떄 이런 하이퍼파라미터는 모두 클래스나 메서드의 매개변수로 표현됩니다

    그럼 이런 하이퍼파라미터를 튜닝하는 작업은 어떻게 진행할까요? 먼저 라이브러리 제공하는 기본값을
    그대로 사용해 모델을 훈련합니다. 그 다음 검증 세트의 점수나 교차 검증을 통해서 매개변수를
    조금씩 바꿔 봅니다. 모델마다 적게는 1~2개에서 많게는 5~6개의 매개변수를 제공합니다. 이
    매개변수를 바꿔가면서 모델을 훈련하고 교차 검증을 수행해야하죠

    그런데 아주 중요한 점이 있습니다. 가령 결정 트리 모델에서 최적의 max_depth 값을 찾았다고 가정해 봅시다.
    그다음 max_depth를 최적의 값으로 고정하고 min_samples_split을 바꿔가며 최적의 값을 찾습니다.
    이렇게 한 매개변수의 최적값을 찾고 다른 매개변수의 최적값을 찾아도 될까요? 아니요 틀렸습니다. 불행하게도
    max_depth의 최적값은 min_samples_split 매개변수의 값이 바뀌면 함께 달라집니다. 즉 이 두매개변수를 동시에
    바꿔가며 최적의 값을 찾아야 하는거죠!

    게다가 매개변수가 많아지면 문제는 더 복잡해집니다. 파이썬의 for 반복문으로 이런 과정을 직접 구현할 수도
    있지만, 이미 만들어진 도구를 사용하는게 편리하겠죠? 사이킷런에서 제공하는 그리드 서치를 사용합시다.

    사이킷런의 GridSearchCV클래스는 친절하게도 하이퍼 파라미터 탐색과 교차 검증을 한 번에 수행 합니다.
    별도로 cross_validate()함수를 호출할 필요가 없죠. 그럼 어떻게 사용하는지 간단한 예를 만들어보죠
    기본 매개변수를 사용한 결정 트리 모델에서 min_impurity_decrease 매개변수의 최적값을 찾아보겠습니다.
    먼저 GridSearchCV클래스를 임포트하고 탐색할 매개변수와 탐색할 값의 리스트를 딕셔너리로 만듭니다.
'''
params = {'min_impurity_decrease':[0.0001,0.0002,0.0003,0.0004,0.0005]}

gs = GridSearchCV(DecisionTreeClassifier(random_state=42),params,n_jobs=-1)

'''
    결정트리 클래스의 객체를 생성하자마자 바로 전달했습니다. 그다음 일반 모델을 훈련하는 것처럼
    gs객체에 fit()메서드를 호출합니다. 이메서드를 호출하면 그리드 서치 객체는 결정트리 모델
    min_impurity_decrease 값을 바꿔가며 총 5번 실행합니다.

    GridSerchCV의 cv매개변수 기본값은 5입니다. 따라서 min_impurity_decrease 값마다 5폴드 교차검증을
    수행합니다. 결국 5*5 = 25개의 모델을 훈련합니다. 많은 모델을 훈련하기 때문에 GridSearCV클래스의
    n_jobs 매개변수에서 병렬 실행에 사용할 CPU 코어수를 지정하는 것이 좋습니다.
    이 매개변수의 기본값은 1입니다. -1로 지정하면 시스템에 있는 모든 코어를 사용합니다.
    그럼 그리드 서치를 수행해보죠 실행결과는 크게 중요하지 않아 건너 뜁니다.
'''

gs.fit(train_input,train_target)

'''
    교차 검증에서 최적의 하이퍼파라미터를 찾으면 전체 훈련 세트로 모델을 다시 만들어야 한다고 했던것을
    기억하나요? 아주 편리하게도 사이킷런의 그리드 서치는 훈련이 끝나면 25개의 모델 중에서 검증 점수가
    가장 높은 모델의 매개변수 조합으로 전체 훈련세트에서 자동으로 다시 모델을 훈련합니다.
    이 모델은 gs객체의 best_estimator_속성에 저장 되어 있습니다. 이 모델을 일반 결정 트리처럼 똑같이
    사용할 수 있습니다.
'''

dt = gs.best_estimator_
print(dt.score(train_input,train_target))
print(gs.best_params_)

print(gs.cv_results_['mean_test_score'])

'''
    첫번째 값이 가장 큰 것 같군요. 수동으로 고르는 것보다 넘파이 argmax함수를 사용하면 가장 큰 값의 인덱스를
    추출할수 있습니다. 그다음 이 인덱스를 사용해 params키에 저장된 매개변수를 출력 할 수도 있습니다.
    이 값이 최상의 검증 점수를 만든 매개변수 조합입니다. 앞에서 출력한 gs.best_params_와 동일한지
    확인해보세요
'''

best_index = np.argmax(gs.cv_results_['mean_test_score'])
print(gs.cv_results_['params'][best_index])

'''
    1. 먼저 탐색할 매개변수를 지정합니다.
    2. 그다음 훈련 세트에서 그리드 서치를 수행하여 최상의 평균 검증 점수가 나오는 매개변수 조합을 찾습니다.
    이 조합은 그리드 서치 객체에 저장됩니다.
    3. 그리드 서치는 최상의 매개변수에서 (교차 검증에 사용한 훈련 세트가 아니라) 전체 훈련 세트를
    사용해 최종 모델을 훈련합니다. 이 모델도 그리드 서치 객체에 저장됩니다.
'''

params = {'min_impurity_decrease':np.arange(0.0001,0.001,0.0001),'max_depth':range(5,20,1),'min_samples_split':range(2,100,10)}

print(params)
'''
    1. 넘파이 arange() 함수는 첫번쨰 매개변수 값에서 두번쨰 매개변수에 도달할 떄까지 세번쨰 매개변수를
    계속 더한 배열을 만듭니다. 코드에서는 0.0001에서 시작하여 0.001이 될떄까지 0.0001을 계속 더한 배열입니다
    두번쨰 매개변수는 포함되지 않으므로 배열의 원소는 총 9개 입니다.

    2. 파이썬 range()함수도 비슷합니다. 하지만 이 함수는 정수만 사용할 수 있습니다.
    이경우 max_depth를 5에서 20까지 증가사면서 1씩 증가하면서 15개의 값을 만듭니다.
    min_samples_aplit는 2에서 100까지 10씩 증가하면서 10개의 값을 만듭니다.

    따라서 이 매개변수로 수행할 교차 검증 횟수는 9*15*10 = 1350개입니다. 기본 5-폴드 교차 검증을 수행하므로
    만들어지는 모델의 수는 6750개나 됩니다. n_jobs 매개변수를 -1로 설정하고 그리드 서치를 실행해 보겠습니다.
'''

gs = GridSearchCV(DecisionTreeClassifier(random_state=42),params,n_jobs=-1)
gs.fit(train_input,train_target)

print(gs.best_params_)
print(np.max(gs.cv_results_['mean_test_score']))

'''
    훌륭합니다. GridSearchCV클래스를 사용하니 매개변수를 일일이 바꿔가며 교차 검증을 수행하지 않고
    원하는 매개변수 값을 나열하면 자동으로 교차 검증을 수행해서 최상을 매개변수를 찾을 수 있습니다.

    그런데 아직 조금 아쉬운 점이 있습니다. 앞에서 탐색할 매개변수의 간격을 0.0001혹은 1로 설정했는데요
    이렇게 간격을 둔 것에 특별한 근거가 없습니다. 이보다 더 좁거나 넓은 간격으로 시도해 볼수 있지 않을까요?
'''

# 랜덤 서치
'''
    매개변수의 값이 수치일때 값의 범위나 간격을 미리 정하기 어려울 수 있습니다. 또 너무 많은 매개변수
    조건이 있어 그리드 서치 수행 시간이 오래 걸릴 수 있습니다. 이럴떄 랜덤 서치를 사용하면 좋습니다.

    랜덤 서치에는 매개변수 값이 목록을 전달하는 것이 아니라 매개변수를 샘플링 할 수 있는 확률 분포객체를
    전달합니다. 확률 분포라 하니 조금 어렵게 들릴 수 있지만 간단하고 쉽습니다. 먼저 싸이파이에서
    2개의 확률 분포 클래스를 임포트 해보죠.

    싸이파이란................
    싸이파이는 파이썬의 핵심과학 라이브러리 중 하나입니다. 적분, 보간, 선형 대수, 확률 등을 포함한
    수치 계산 전용 라이브러리 입니다. 사이킷런은 넘파이와 싸이파이 기능을 많이 사용합니다.
    코랩에는 이미 설치 되어 있다.
'''

'''
    싸이파이의 stats 서브 패키지에 있는 uniform과 randint클래스는 모두 주어진 범위에서 고르게 값을 뽑습니다.
    이를 균등분포에서 샘플링 한다라고 말합니다. randint는 정숫값을 뽑고, uniform은 실숫값을 뽑습니다.
    사용하는 방법은 같습니다. 0에서 10사이의 범위를 갖는 randint객체를 만들고 10개의 숫자를 샘플링해보겠습니다.
'''

rgen = randint(0,10)
nansu = rgen.rvs(10)
print(nansu)

'''
    좋습니다. 난수 발생기랑 유사하게 생각하면 됩니다. 랜덤 서치에 randint과 uniform 클래스 객체를 넘겨주고,
    총 몇 번을 샘플링해서 최적의 매개변수를 찾으라고 명령할 수 있습니다. 샘플링 횟수는 시스템 자원이
    허락하는 범위 내에서 최대한 크게 하는 것이 좋겠죠

    그럼 탐색할 매개변수의 딕셔너리를 만들어 보겠습니다. 여기에서는 min_samples_leaf 매개변수를 탐색 대상에
    추가하겠습니다. 이 매개변수는 리프 노드가 되기 위한 최소 샘플의 개수입니다. 어떤 노드가 분할하여 만들어질
    자식 노드의 샘플 수가 이 값보다 작을 경우 분할하지 않습니다.
'''

params = {'min_impurity_decrease':uniform(0.0001,0.001),
         'max_depth':randint(20,50),
         'min_samples_split':randint(2,25),
         'min_samples_leaf':randint(1,25),
         }

'''
    min_impurity_decrease는 0.0001에서 0.001사이의 실숫값을 샘플링 합니다. max_depth는 20~50사이의 정수
    min_samples_split은 2에서 25사이의 정수, min_samples_leaf는 1에서 25사이의 정수를 샘플링합니다.
    샘플링 횟수는 사이킷런의 랜덤 서치 클래스인 RandomizedSearchCV의 n_iter매개변수에 지정합니다.
'''

gs = RandomizedSearchCV(DecisionTreeClassifier(random_state=42), params,n_iter=100,n_jobs=1,random_state=42)
gs.fit(train_input,train_target)

'''
    위 params에 정의된 매개변수 범위에서 총 100번을 샘플링하여 교차 검증을 수행하고 최적의 매개변수 조합을
    찾습니다. 앞서 그리드 서치보다 훨씬 교차 검증 수를 줄이면서 넣ㅂ은 영역을 효과적으로 탐색할 수 있습니다.
    결과를 확인해 보죠, 먼저 최적의 매개변수 조합을 출력하겠습니다.
'''

print(gs.best_params_)

print(np.max(gs.cv_results_['mean_test_score']))

'''
    최적의 모델을 위한 하이퍼 파라미터 탐색
    레드 와인과 화이트 와인을 선별하는 작업의 성능을 끌어 올리기 위해 결정 트리의 다양한 하이퍼파라미터를
    시도해 봐야 합니다. 이런 과정에서 테스트 세트를 사용하면 결국 테스트 세트에 맞춰 모델을 훈련하는
    효과를 만듭니다.

    테스트 세트는 최종 모델을 선택할 때까지 사용하지 말아야 합니다. 테스트 세트를 사용하지 않고 모델을
    평가하려면 또 다른 세트가 필요합니다. 이를 검증 세트라고 부릅니다. 혹은 개발세트라고도 부릅니다
    검증 세트는 훈련 세트중 일부를 다시 덜어 내어 만듭니다.

    검증세트가 크지 않다면 어떻게 데이터를 나누었는지에 따라 검증 점수가 들쭉날쭉할 것입니다. 훈련한 모델의
    성능을 안정적으로 평가하기 위해 검증 세트를 한번 나누어 모델을 평가하는 것에 그치지 않고 여러번
    반복할 수 있습니다. 이를 교차 검증이라고 합니다.

    보통 훈련세트를 5등분 혹은 10등분 합니다. 나누어진 한 덩어리를 폴드라고 부르며 한 폴드씩 돌아 가면서
    검증 세트의 역활을 합니다. 따라서 전체적으로 5개 혹은 10개의 모델을 만듭니다. 최종 검증 점수는
    모든 폴드의 검증 점수를 평균하여 계산합니다.

    교차 검증을 사용해 다양한 하이퍼 파라미터를 탐색합니다. 머신러닝 라이브러리에서는 클래스와 메서드의
    매개변수를 바꾸어 모델을 훈련하고 평가해 보는 작업입니다. 이런 과정은 떄론 지루하고 복잡합니다.
    테스트 하고 싶은 매개변수 리스트를 만들어 이 과정을 자동화 하는 그리드 서치를 사용하면 편리합니다.

    매개변수 값이 수치형이고 특히 연속적인 실숫값이라면 싸이파이의 확률 분포 객체를 전달하여 특정범위
    내에서 지정된 횟수만큼 매개변수 후보 값을 샘플링하여 교차 검증을 시도할 수 있습니다. 이는 한정된
    자원을 최대한 활용하여 효율적으로 하이퍼 파라미터 공간을 탬색할 수 있는 아주 좋은 도구 입니다.
'''